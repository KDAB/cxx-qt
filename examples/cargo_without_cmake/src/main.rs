// SPDX-FileCopyrightText: 2022 Klar√§lvdalens Datakonsult AB, a KDAB Group company <info@kdab.com>
// SPDX-FileContributor: Be Wilson <be.wilson@kdab.com>
// SPDX-FileContributor: Andrew Hayzen <andrew.hayzen@kdab.com>
// SPDX-FileContributor: Gerhard de Clercq <gerhard.declercq@kdab.com>
//
// SPDX-License-Identifier: MIT OR Apache-2.0

// ANCHOR: book_cargo_imports
mod cxxqt_object;
mod resources;
// ANCHOR_END: book_cargo_imports

// ANCHOR: book_cargo_extern_c
extern "C" {
    fn run_cpp();
}
// ANCHOR_END: book_cargo_extern_c

// ANCHOR: book_cargo_rust_main
fn main() {
    // ANCHOR: book_cargo_init_qrc
    // Normally in a C++ program, global variables for the Qt Resource System are
    // initialized before the C++ main function runs. However, when building a
    // Rust executable with Cargo, the Qt Resource System needs to be initialized
    // manually.
    // https://doc.qt.io/qt-6/resources.html#explicit-loading-and-unloading-of-embedded-resources

    // Include the C++ code generated by rcc from the .qrc file
    resources::ffi::qInitResources();
    // ANCHOR_END: book_cargo_init_qrc

    let mut app = cxx_qt_lib::QGuiApplication::new();

    // Call the C++ initialization code to start the QML GUI.
    unsafe {
        run_cpp();
    }

    if let Some(app) = app.as_mut() {
        app.exec();
    }
}
// ANCHOR_END: book_cargo_rust_main
